name: Windows Cross Compiled

on:
  push:
    branches-ignore:
      - 'dependabot/**'

  workflow_dispatch:

jobs:
  build_base:
    name: Build base image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_ACTOR,,}/base:latest"

      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          context: images/base
          pull: true
          push: true
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}
          cache-to: type=inline
          tags: ${{ steps.imagename.outputs.name }}

  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win32, win64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_ACTOR,,}/base-${{ matrix.target }}:latest"

      - name: Build target base image
        uses: docker/build-push-action@v2
        with:
          context: images/base-${{ matrix.target }}
          pull: true
          push: true
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}
          cache-to: type=inline
          tags: ${{ steps.imagename.outputs.name }}

  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win32, win64]
        variant: [nonfree, nonfree-shared]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}

      - name: Image Name
        id: imagename
        run: |
          IMG="ghcr.io/${GITHUB_ACTOR,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "::set-output name=image::${IMG/ /-}:latest"
          echo "::set-output name=cache::${IMG/ /-}:cache"

      - name: Build variant image
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          cache-from: type=registry,ref=${{ steps.imagename.outputs.cache }}
          cache-to: type=registry,ref=${{ steps.imagename.outputs.cache }},mode=max
          tags: ${{ steps.imagename.outputs.image }}

  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win32, win64]
        variant: [nonfree, nonfree-shared]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg
          path: artifacts/
          retention-days: 1
